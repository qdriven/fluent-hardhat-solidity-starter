/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Lock, LockInterface } from "../Lock";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "owerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405261001e6746259dff46859cf260c01b61009f60201b60201c565b610038671bf1bddf2e99e98960c01b61009f60201b60201c565b4260008190555061005967f1953396a2694d9360c01b61009f60201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100a2565b50565b6105b6806100b16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063251c1aa3146100515780633ccfd60b1461006f5780638da5cb5b14610079578063fea796b714610097575b600080fd5b6100596100b5565b60405161006691906103f7565b60405180910390f35b6100776100bb565b005b610081610338565b60405161008e9190610453565b60405180910390f35b61009f61035e565b6040516100ac91906103f7565b60405180910390f35b60005481565b6100cf671802e3c82043d3c460c01b6103db565b6100e367860c36d4e811647d60c01b6103db565b6100f767ac9fdcfa86146ed360c01b6103db565b61010b67077cccc91cedab0260c01b6103db565b600054421015610150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610147906104cb565b60405180910390fd5b61016467c065ec4406ab573160c01b6103db565b610178671f9c30a99f99fc3d60c01b6103db565b61018c676eef95290a0bc83360c01b6103db565b6101a0674c96cf19b25139a860c01b6103db565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022790610537565b60405180910390fd5b610244678ee8037fb628a21f60c01b6103db565b6102586701bc997d0ba0f37360c01b6103db565b61026c6721d8400201a0294060c01b6103db565b7fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93474260405161029d929190610557565b60405180910390a16102b9678ed1bf825d4780d560c01b6103db565b6102cd67052f3ba1523dcfea60c01b6103db565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610335573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061037467bcb9fec4a249db5160c01b6103db565b61038867b2a5be8625578a5160c01b6103db565b61039c673329b36bb75fda2a60c01b6103db565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631905090565b50565b6000819050919050565b6103f1816103de565b82525050565b600060208201905061040c60008301846103e8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061043d82610412565b9050919050565b61044d81610432565b82525050565b60006020820190506104686000830184610444565b92915050565b600082825260208201905092915050565b7f596f752063616e27742077697468647261772079657400000000000000000000600082015250565b60006104b560168361046e565b91506104c08261047f565b602082019050919050565b600060208201905081810360008301526104e4816104a8565b9050919050565b7f596f75206172656e277420746865206f776e6572000000000000000000000000600082015250565b600061052160148361046e565b915061052c826104eb565b602082019050919050565b6000602082019050818103600083015261055081610514565b9050919050565b600060408201905061056c60008301856103e8565b61057960208301846103e8565b939250505056fea26469706673582212201a13e4573f27e1a9817fb56b8811f09859feb4aff5abfb0acfdc1f74bb3c97e664736f6c63430008120033";

type LockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lock__factory extends ContractFactory {
  constructor(...args: LockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Lock> {
    return super.deploy(overrides || {}) as Promise<Lock>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Lock {
    return super.attach(address) as Lock;
  }
  override connect(signer: Signer): Lock__factory {
    return super.connect(signer) as Lock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LockInterface {
    return new utils.Interface(_abi) as LockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lock {
    return new Contract(address, _abi, signerOrProvider) as Lock;
  }
}
